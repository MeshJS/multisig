generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  address      String @unique
  stakeAddress String @unique
  drepKeyHash  String @default("")
  nostrKey     String @unique
  discordId    String @default("")
}

model Wallet {
  id                      String   @id @default(cuid())
  name                    String
  description             String?
  signersAddresses        String[]
  signersStakeKeys        String[]
  signersDRepKeys         String[]
  signersDescriptions     String[]
  numRequiredSigners      Int?
  verified                String[]
  scriptCbor              String
  stakeCredentialHash     String?
  type                    String
  isArchived              Boolean  @default(false)
  clarityApiKey           String?
  migrationTargetWalletId String?
}

model Transaction {
  id                String   @id @default(cuid())
  walletId          String
  txJson            String
  txCbor            String
  signedAddresses   String[]
  rejectedAddresses String[]
  description       String?
  state             Int
  txHash            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Signable {
  id                String   @id @default(cuid())
  walletId          String
  payload           String
  signatures        String[]
  signedAddresses   String[]
  rejectedAddresses String[]
  description       String?
  method            String?
  state             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  callbackUrl       String?
  remoteOrigin      String?
}

model NewWallet {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  signersAddresses    String[]
  signersStakeKeys    String[]
  signersDRepKeys     String[]
  signersDescriptions String[]
  numRequiredSigners  Int?
  ownerAddress        String
  stakeCredentialHash String?
  scriptType          String?
  usesStored          Boolean  @default(false)
  paymentCbor         String?
  stakeCbor           String?
  rawImportBodies     Json?
}

model Nonce {
  id        String   @id @default(cuid())
  address   String   @unique
  value     String
  createdAt DateTime @default(now())
}

model Ballot {
  id               String   @id @default(cuid())
  walletId         String
  description      String?
  items            String[]
  itemDescriptions String[]
  choices          String[]
  type             Int
  createdAt        DateTime @default(now())
}

model Proxy {
  id           String   @id @default(cuid())
  walletId     String?
  proxyAddress String
  authTokenId  String
  paramUtxo    String
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
}

model BalanceSnapshot {
  id            String   @id @default(cuid())
  walletId      String
  walletName    String
  address       String
  adaBalance    Decimal
  assetBalances Json
  isArchived    Boolean
  snapshotDate  DateTime @default(now())
}

model Migration {
  id               String    @id @default(cuid())
  originalWalletId String // The wallet being migrated from
  newWalletId      String? // The new wallet being created (null until created)
  ownerAddress     String // The user who initiated the migration
  currentStep      Int       @default(0) // 0=pre-checks, 1=create wallet, 2=proxy setup, 3=transfer funds, 4=complete
  status           String    @default("pending") // pending, in_progress, completed, failed, cancelled
  migrationData    Json? // Store any additional migration-specific data
  errorMessage     String? // Store error details if migration fails
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  completedAt      DateTime?

  // Indexes for efficient querying
  @@index([ownerAddress])
  @@index([originalWalletId])
  @@index([status])
  @@index([createdAt])
}
